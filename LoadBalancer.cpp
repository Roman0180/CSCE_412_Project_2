#include <string>
#include <queue>
#include <vector>
#include <algorithm>  // for std::min_element()
#include <iostream>
#include "WebServer.cpp"

using namespace std; 

class LoadBalancer{
    public:
        queue<Request> queue;  
        vector<WebServer> webServers; 
        int currClockCycle;
        int maxClockCycles; 
        LoadBalancer(int maxTime) : currClockCycle(0), maxClockCycles(maxTime) {}; 

        /// @brief THIS WAS GENERATED BY CHATGPT: A function to get the webserver that is currently available
        /// @return This function returns a pointer to the webserver that has the lowest load
        // WebServer getServer() {
        //     auto minLoadIter = std::min_element(webServers.begin(), webServers.end(),[](const WebServer* a, const WebServer* b) {
        //         return a->activeRequests < b->activeRequests;
        //         });
        //     return *minLoadIter;
        // }
        /// @brief This function is responsible for sending a response to the web server and managing the reply
        void sendToWebserver(){
            // pop from the queue 

            // send to the web server

            // get response back after the request packet's time has elapsed 


        }
        
        

}; 