#include <string>
#include <cstdlib>  // for rand() and srand()
#include <ctime>    // for time()
#include <sstream>
#include <queue>
using namespace std; 
struct RequestData{
    string data; 
    RequestData() : data(""){}
}; 

class Request{
    public: 
        string ipIn; 
        string ipOut; 
        int timeToProcess;
        RequestData data; 

        Request(){}; 
        Request(int currTime, int maxTime) : ipIn(generateIPAddress()), ipOut(generateIPAddress()), timeToProcess(generateTimeToProcess(currTime, maxTime)), data(RequestData()){}; 
        /// @brief THIS WAS GENERATED BY CHATGPT: A method to randomly generate an IP address
        string generateIPAddress() {
            stringstream ss;
            for (int i = 0; i < 4; i++) {
                int num = rand() % 256;
                ss << num;
                if (i < 3) {
                ss << ".";
                }
            }
            return ss.str();
        }

        /// @brief THIS WAS GENERATED BY CHATGPT: A method to randomly generate the time a Request takes to process. The process time time will be less than or equal to the amount of clock cycles left. 
        int generateTimeToProcess(int min, int max){
            static const double fraction = 1.0 / (RAND_MAX + 1.0);  // static used for efficiency, so we only calculate this value once
            // evenly distribute the random number across our range
            return min + static_cast<int>((max - min + 1) * (rand() * fraction));
        }
       
    
}; 


