#include <string>
#include <cstdlib> // for rand() and srand()
#include <ctime>   // for time()
#include <sstream>
#include <queue>

#include <random>
#include <string>

std::string generateRandomString(int length = 25) {
    // this function was generated by CHAT GPT
  static const char alphanum[] =
    "0123456789"
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    "abcdefghijklmnopqrstuvwxyz";

  std::string result;
  result.reserve(length);

  std::random_device rd;
  std::mt19937 generator(rd());
  std::uniform_int_distribution<> distribution(0, sizeof(alphanum) - 2);

  for (int i = 0; i < length; ++i) {
    result += alphanum[distribution(generator)];
  }

  return result;
}

using namespace std;
struct RequestData
{
    string data;
    RequestData() : data(generateRandomString()) {}
};
class Request
{
public:
    string ipIn;
    string ipOut;
    int timeToProcess;
    RequestData data;
    Request(){};
    Request(int currTime, int maxTime) : ipIn(generateIPAddress()), ipOut(generateIPAddress()), timeToProcess(generateTimeToProcess(currTime, maxTime)), data(RequestData()){};
    /// @brief THIS WAS GENERATED BY CHATGPT: A method to randomly generate an IP address
    string generateIPAddress()
    {
        stringstream ss;
        for (int i = 0; i < 4; i++)
        {
            int num = rand() % 256;
            ss << num;
            if (i < 3)
            {
                ss << ".";
            }
        }
        return ss.str();
    }
    /// @brief THIS WAS GENERATED BY CHATGPT: A method to randomly generate the time a Request takes to process. The process time time will be less than or equal to the amount of clock cycles left.
    int generateTimeToProcess(int min, int max)
    {
        // Generate a random number between min and max
        return rand() % (max - min + 1) + min;
    }
};